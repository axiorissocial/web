generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) // UUID primary key
  username    String   @unique
  email       String   @unique
  password    String
  bio         String?  // optional bio
  level       Int      @default(1) // XP/level system
  isAdmin     Boolean  @default(false) // Admin privileges
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLogin   DateTime? 
  isVerified  Boolean  @default(false)
  isPrivate   Boolean  @default(false)

  posts       Post[]    // relation to posts
  likes       Like[]    // relation to post likes
  commentLikes CommentLike[] // relation to comment likes
  comments    Comment[] // relation to comments
  settings    UserSettings?
  profile     Profile?
  
  // Following system
  following   Follow[] @relation("UserFollowing")
  followers   Follow[] @relation("UserFollowers")
  
  // DM system
  conversationParticipants ConversationParticipant[]
  sentMessages            Message[]
  messageReads            MessageRead[]
  
  // Notifications system
  sentNotifications       Notification[] @relation("NotificationSender")
  receivedNotifications   Notification[] @relation("NotificationReceiver")
  
  // Reporting system
  reports       Report[] @relation("UserReports")    // Reports made by this user
  reviewedReports Report[] @relation("AdminReviews")  // Reports reviewed by this admin
}

model Profile {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  displayName String?
  avatar      String?  // URL to profile picture
  banner      String?  // URL to banner image
  location    String?
  website     String?
  bio         String?  // Extended bio
  birthDate   DateTime?
  joinedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Post {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  title      String?
  slug       String?  @unique
  content    String   // can be base64 if needed
  media      Json?    // optional JSON field for images/videos
  likesCount Int      @default(0)
  viewsCount Int      @default(0)
  isPinned   Boolean  @default(false)
  isPrivate  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  likes         Like[]
  comments      Comment[]
  notifications Notification[]
  reports       Report[]  // Reports against this post
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  content   String
  likesCount Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  editedAt  DateTime? // Track when content was last edited (null if never edited)
  
  // Reply system
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  replies   Comment[] @relation("CommentReplies")
  
  // Likes relationship
  likes         CommentLike[]
  notifications Notification[]
  reports       Report[]  // Reports against this comment
}

model Like {
  user   User  @relation(fields: [userId], references: [id])
  userId String
  post   Post  @relation(fields: [postId], references: [id])
  postId String
  createdAt DateTime @default(now())

  @@id([userId, postId]) // composite primary key
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())

  @@id([userId, commentId]) // composite primary key
}

model UserSettings {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  theme       String   @default("dark")
  language    String   @default("en")
  notifications Json?  // JSON for notification preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Conversation {
  id            String   @id @default(uuid())
  participants  ConversationParticipant[]
  messages      Message[]
  lastMessage   Message? @relation("LastMessage", fields: [lastMessageId], references: [id])
  lastMessageId String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  notifications Notification[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  
  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  content        String
  media          Json?        // For future media message support
  readBy         MessageRead[]
  isEdited       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relation for last message in conversation
  lastMessageIn  Conversation? @relation("LastMessage")
}

model MessageRead {
  id        String   @id @default(uuid())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  readAt    DateTime @default(now())
  
  @@unique([messageId, userId])
}

// Notification system
model Notification {
  id          String            @id @default(uuid())
  type        NotificationType
  sender      User?             @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String?
  receiver    User              @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  post        Post?             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  comment     Comment?          @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String?
  conversation Conversation?    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  message     String?           // Custom notification message
  isRead      Boolean           @default(false)
  isArchived  Boolean           @default(false)
  archivedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum NotificationType {
  LIKE         // Someone liked your post
  COMMENT      // Someone commented on your post
  FOLLOW       // Someone followed you
  MENTION      // Someone mentioned you in a post/comment
  REPLY        // Someone replied to your comment
  COMMENT_LIKE // Someone liked your comment
  MESSAGE      // Someone sent you a message
}

// Unified reporting system for posts, comments, and replies
model Report {
  id          String      @id @default(uuid())
  reporter    User        @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId  String
  
  // Reported content (one of these will be set)
  post        Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?
  comment     Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String?
  
  reason      ReportReason
  description String?     // Additional details from reporter
  status      ReportStatus @default(PENDING)
  
  // Admin handling
  reviewedBy  User?       @relation("AdminReviews", fields: [reviewedById], references: [id])
  reviewedById String?
  reviewNotes String?     // Admin notes
  reviewedAt  DateTime?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum ReportReason {
  SPAM
  HARASSMENT
  INAPPROPRIATE_CONTENT
  COPYRIGHT_VIOLATION
  MISINFORMATION
  HATE_SPEECH
  VIOLENCE
  OTHER
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}
